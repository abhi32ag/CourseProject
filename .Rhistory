Data = read.csv(/Users/abhi/Desktop/hotel.txt)
Data = read.csv("/Users/abhi/Desktop/hotel.txt")
View(Data)
View(Data)
Data.features$Type.of.Room <- NULL
Data.features = Data
Data.features$Type.of.Room <- NULL
View(Data.features)
kmeans(Data.features, 3)
Data.features <- subset(Data,select = c("Customer.Age","Number.of.days.Stay"))
Data = read.csv("/Users/abhi/Desktop/hotel.txt")
Data.features <- subset(Data,select = c("Customer.Age","Number.of.days.Stay"))
kmeans(Data.features,3)
results <- kmeans(Data.features,3)
results
View(Data.features)
View(Data.features)
results$cluster
result <- kmeans(Data.features$Customer.Age,3)
results
result
plot(Data[c("Customer.Age")],col=result$cluster)
plot(Data[c("Customer.Age","Number.of.days.Stay")],col=result$cluster)
con <- file("code.log")
sink(con,append=TRUE)
sink(con, append=TRUE, type="message")
sink()
sink(type="message")
cat(readLines("code.log"),sep="\n")
Data.features
k = kmeans(Data.features,3)
k
k$cluster
plot(Data[c("Number.of.days.Stay, "Customer.Age"")], col = k$cluster)
plot(Data[c("Number.of.days.Stay", "Customer.Age")], col = k$cluster)
clc
clear
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
Data.features
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
k$cluster
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
k
plot(Data[c("Customer.Age", "Number.of.days.Stay")], col = k$cluster)
install.packages("KernSmooth")
library(KernSmooth)
ls
rm(list=ls())
ls
source('~/Rprogramming/Assignment/pollutantmean.R')
ls
rm(list = ls())
mydata = rnorm(100)
sd(mydata)
sd( x = mydata)
sd(na.rm = FALSE, x = mydata)
lm(data=mydata, y-x, model=FALSE, 1:100)
y<- 10
f <- function(x){}
f <- function(x){ y<- 2
y^2 +g(x)}
g<- function(x){
x*y
}
f(3)
x <- as.POSIXct("2012-10-25 01:00:00")
y <- as.POSIXct("2012-10-25 06:00:00", tz="GMT")
y-x
unclass(x)
x
x <- list(a = 1:5, b = rnorm(10))
x
x$a
x$b
x[1]
x[2]
lapply(x,mean)
rm(list=ls())
ls
ls(environment)
?runif
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3, 10)
f
tapply(x,f,mean)
as.list(tapply(x,f, mean))
tapply(x,f,range)
split(x,f)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
split(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]), na.rm = TRUE)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm= TRUE))
split(airquality, list(airquality$Month,airquality$Temp))
split(airquality, list(airquality$Month,airquality$Temp), drop=TRUE)
rm(list=ls())
log(-1)
printmessage <- function(x) {
if(x<0)
print("x is greater")
else
print("x is less")
invisible(x)
}
printmessage(5)
lm(y ~ x)
debug(lm)
lm(y ~ x)
library(datasets)
data(iris)
?iris
head(iris)
lapple(iris$Sepal.Length, mean)
lapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, function(x) colMeans(x = "iris$Sepal.Length"))
s <- split(iris$Sepal.Length, iris$Species = "virginica")
s <- split(iris$Sepal.Length, iris$Species)
s
s$virginica
sapply(s$virginica, mean)
lappy(s$virginica, mean)
lapply(s$virginica, mean)
sapply(s$virginica, function(x) rowMeans(x))
s$virginica
p <- as.vector(s$virginica)
p
sappl(p, mean)
apply(p, mean)
sapply(p, mean)
rowMeans(p)
as.matrix(p)
p <- as.matrix(p)
rowMeans(p)
colMeans(p)
data <- iris
data
apply(iris[,1:4], 2, mean)
data(mtcars)
data <- mtcars
?mtcars
head(data)
?tapply
tapply(mtcars$mpg,mtcars$cyl, mean )
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
s <- split(mtcars$mpg, mtcars$cyl)
sapply(s, mean)
apply(mtcars, 2, mean)
?mtcars
s <- split(mtcars$hp, mtcars$cyl)
s
apply(s,s$4,mean)
sapply(s,mean)
test <- sapply(s, mean)
test
difference <- abs(test[1] - test[3])
difference
debug(ls)
ls()
data(iris)
s <- split(iris$Sepal.Length, iris$Species)
library(datasets)
data(iris)
s<- split(iris$Sepal.Length, iris$Species)
s
sapply(s$virginica, mean)
a <- as.matrix(s$virginica)
a
rowMeans(a)
colMeans(a)
m <- round(colMeans(a))
m
apply(iris[,1:4],2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
library(mtcars)
data(mtcars)
data <- mtcars
data
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg,cyl,mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
tapply(data, mtcars$cyl, mean)
tapply(mtcars, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
t <- tappl(mtcars$hp, mtcars$cyl, mean)
t <- tapply(mtcars$hp, mtcars$cyl, mean)
t
m <- round(abs(t[1]-t[3]))
m
t
a <- abs(t[1] - t[3])
a
data <- matrix(c(3,4,1,2),2,2)
data
solve(data)
solve(data) %*% data
rm(workspace)
ls
rm(list=ls())
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 +2*x + e
summary(y)
plot(x,y)
rm(list=ls())
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 +2*x + e
plot(x,y)
library(XML)
install.packages("XML")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[1]
rootNode[[1]]
rootNode$food
rootNode$food[1]
xmlSApply(rootNode)
xpathSApply(rootNode, "//name", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal = T)
scores <- xpathSApply(doc, "//li{@class='scores}",xmlValue)
scores <- xpathSApply(doc, "//li{@class='score'}",xmlValue)
scores <- xpathSApply(doc, "//li[@class='score']",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
team
teams
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A <- matrix(1:10,nr=5,nc=2)
A
h5write(A,"example.h5","/foo")
h5write(A,"example.h5","foo/A")
h5ls("example.h5")
h5read("example.h5","foo/A")
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode <- readLines(con)
close(con)
htnlCode
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
library(httr)
html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText =T)
xpathSApply(parsedHtml ,"//title", xmlValue)
my app= oauth_app("twitter",
key = "5gNbCu1yuDtsjJNuzWF3rv73w", secret = "oWjFnFTyZ8tPI2lAz4uLcr9d2g3yeVxBeF55oEacFn3fa9Q3dW")
my app= oauth_app("twitter",
key = "5gNbCu1yuDtsjJNuzWF3rv73w", secret = "oWjFnFTyZ8tPI2lAz4uLcr9d2g3yeVxBeF55oEacFn3fa9Q3dW")
my app= oauth_app("twitter",
key = "5gNbCu1yuDtsjJNuzWF3rv73w",secret = "oWjFnFTyZ8tPI2lAz4uLcr9d2g3yeVxBeF55oEacFn3fa9Q3dW")
myapp= oauth_app("twitter",
key = "5gNbCu1yuDtsjJNuzWF3rv73w",secret = "oWjFnFTyZ8tPI2lAz4uLcr9d2g3yeVxBeF55oEacFn3fa9Q3dW")
dig = sign_oauth1.0(myapp,
token="861588650-YJh6ZLNt9j3QDkrAxHo7lIInKQGEuDrv7Herb4st",
token_secret = "FVb9B1lqXiSM0Tng7Js2MsdJsEQaijbQIbcgG0zZB6Ptz")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", dig)
str(homeTL)
head(homeTL)
json1 <- content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
getwd()
setwd("./CourseProject")
getwd()
source("run_analysis.R")
source("run_analysis.R")
getwd()
source("run_analysis.R")
View(trainData)
source('~/CourseProject/run_analysis.R')
View(trainData)
View(trainLabel)
source('~/CourseProject/run_analysis.R')
source('~/CourseProject/run_analysis.R')
source('~/CourseProject/run_analysis.R')
View(features)
names(mergedData)
source('~/CourseProject/run_analysis.R')
?substr
View(mergedLabel)
source('~/CourseProject/run_analysis.R')
head(activityLabel)
activityLabel
View(mergedLabel)
source('~/CourseProject/run_analysis.R')
View(mergedLabel)
names(mergedSubject)
names(mergedLabel)
names(mergedData)
source('~/CourseProject/run_analysis.R')
View(mergedLabel)
View(mergedSubject)
